name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  FRONTEND_STACK_NAME: polaris-frontend-stack
  BACKEND_STACK_NAME: polaris-backend-stack

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: Deploy Frontend Stack
      run: |
        echo "Deploying frontend stack..."
        if ! aws cloudformation deploy \
          --template-file .github/cloudformation/frontend-amplify.yml \
          --stack-name ${{ env.FRONTEND_STACK_NAME }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            RepositoryUrl=https://github.com/${{ github.repository }} \
            BranchName=${{ github.ref_name }} \
            Environment=production \
            GitHubToken=${{ secrets.GH_PERSONAL_TOKEN }} \
            BackendUrl=https://cvsmuhhazj.us-east-1.awsapprunner.com; then
          
          echo "‚ùå Frontend stack deployment failed!"
          echo "Getting error details..."
          aws cloudformation describe-stack-events \
            --stack-name ${{ env.FRONTEND_STACK_NAME }} \
            --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].{Time:Timestamp,Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}' \
            --output table || echo "Could not retrieve stack events"
          exit 1
        fi
        echo "‚úÖ Frontend stack deployed successfully!"

    - name: Get Amplify App ID
      id: get-app-id
      run: |
        APP_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.FRONTEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
          --output text)
        echo "app-id=$APP_ID" >> $GITHUB_OUTPUT
        echo "Amplify App ID: $APP_ID"

    - name: Trigger Amplify Build
      run: |
        # Check if there's already a running job
        RUNNING_JOBS=$(aws amplify list-jobs \
          --app-id ${{ steps.get-app-id.outputs.app-id }} \
          --branch-name ${{ github.ref_name }} \
          --max-results 1 \
          --query 'jobSummaries[?status==`RUNNING` || status==`PENDING`]' \
          --output text)
        
        if [ -z "$RUNNING_JOBS" ]; then
          echo "No running jobs found, starting new build..."
          aws amplify start-job \
            --app-id ${{ steps.get-app-id.outputs.app-id }} \
            --branch-name ${{ github.ref_name }} \
            --job-type RELEASE
        else
          echo "Job already running, skipping trigger..."
        fi

  deploy-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: Deploy Backend Stack
      run: |
        # Check if stack exists and is in a failed state
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --query 'Stacks[0].StackStatus' \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "DOES_NOT_EXIST")
        
        echo "Current stack status: $STACK_STATUS"
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ]; then
          echo "Stack is in failed state ($STACK_STATUS), attempting deletion..."
        elif [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
          echo "Stack is in UPDATE_ROLLBACK_COMPLETE state, checking if App Runner service is operational..."
          
          # Check if App Runner service is running and operational
          SERVICE_ARN=$(aws apprunner list-services \
            --region ${{ env.AWS_REGION }} \
            --query 'ServiceSummaryList[?contains(ServiceName, `polaris-backend`)].ServiceArn' \
            --output text) || echo "No App Runner services found"
          
          if [ ! -z "$SERVICE_ARN" ] && [ "$SERVICE_ARN" != "None" ]; then
            SERVICE_STATUS=$(aws apprunner describe-service \
              --service-arn "$SERVICE_ARN" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' \
              --output text) || echo "UNKNOWN"
            
            echo "App Runner service status: $SERVICE_STATUS"
            
            if [ "$SERVICE_STATUS" = "RUNNING" ]; then
              echo "App Runner service is running, skipping deletion and proceeding with update..."
              SKIP_DELETION=true
            else
              echo "App Runner service is not running ($SERVICE_STATUS), attempting deletion..."
              SKIP_DELETION=false
            fi
          else
            echo "No App Runner service found, attempting deletion..."
            SKIP_DELETION=false
          fi
        elif [ "$STACK_STATUS" = "DELETE_FAILED" ]; then
          echo "Stack is in DELETE_FAILED state, attempting cleanup..."
          SKIP_DELETION=false
        else
          echo "Stack is in state: $STACK_STATUS, proceeding with deployment..."
          SKIP_DELETION=true
        fi
        
        # Only attempt deletion if not skipping
        if [ "$SKIP_DELETION" != "true" ]; then
          
          # First, try to get App Runner service logs before deletion
          echo "üîç Attempting to retrieve App Runner logs before deletion..."
          SERVICE_ARN=$(aws apprunner list-services \
            --region ${{ env.AWS_REGION }} \
            --query 'ServiceSummaryList[?contains(ServiceName, `polaris-backend`)].ServiceArn' \
            --output text) || echo "No App Runner services found"
          
          if [ ! -z "$SERVICE_ARN" ] && [ "$SERVICE_ARN" != "None" ]; then
            echo "üìã Found App Runner Service: $SERVICE_ARN"
            echo "üîç Getting service details and logs..."
            
            # Get service details
            aws apprunner describe-service \
              --service-arn "$SERVICE_ARN" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.{Name:ServiceName,Status:Status,ServiceUrl:ServiceUrl}' \
              --output json || echo "Could not describe service"
            
            # Try to get logs from CloudWatch
            LOG_GROUP="/aws/apprunner/${{ env.BACKEND_STACK_NAME }}"
            echo "üîç Checking CloudWatch logs in group: $LOG_GROUP"
            aws logs describe-log-streams \
              --log-group-name "$LOG_GROUP" \
              --region ${{ env.AWS_REGION }} \
              --order-by LastEventTime \
              --descending \
              --max-items 5 \
              --query 'logStreams[].logStreamName' \
              --output text || echo "No log streams found"
            
            # Get recent log events
            aws logs filter-log-events \
              --log-group-name "$LOG_GROUP" \
              --region ${{ env.AWS_REGION }} \
              --start-time $(date -d '10 minutes ago' +%s)000 \
              --query 'events[].message' \
              --output text || echo "No recent log events found"
          fi
          
          # If stack is in DELETE_FAILED state, we need to manually clean up resources first
          if [ "$STACK_STATUS" = "DELETE_FAILED" ]; then
            echo "Stack is in DELETE_FAILED state, checking for stuck resources..."
            
            # Get list of App Runner services that might be blocking deletion
            echo "Checking for App Runner services..."
            SERVICES=$(aws apprunner list-services \
              --region ${{ env.AWS_REGION }} \
              --query 'ServiceSummaryList[?contains(ServiceName, `polaris-backend`)].ServiceArn' \
              --output text) || echo "No services found"
            
            if [ ! -z "$SERVICES" ] && [ "$SERVICES" != "None" ]; then
              echo "Found App Runner services, deleting them first..."
              for SERVICE_ARN in $SERVICES; do
                echo "Deleting App Runner service: $SERVICE_ARN"
                aws apprunner delete-service \
                  --service-arn "$SERVICE_ARN" \
                  --region ${{ env.AWS_REGION }} || echo "Failed to delete service $SERVICE_ARN"
              done
              
              echo "Waiting for App Runner services to be deleted..."
              sleep 30
            fi
          fi
          
          # Attempt to delete the stack
          aws cloudformation delete-stack --stack-name ${{ env.BACKEND_STACK_NAME }} --region ${{ env.AWS_REGION }}
          echo "Waiting for stack deletion (timeout: 10 minutes)..."
          
          # Wait with timeout to prevent infinite waiting
          if ! timeout 600 aws cloudformation wait stack-delete-complete --stack-name ${{ env.BACKEND_STACK_NAME }} --region ${{ env.AWS_REGION }}; then
            echo "‚ö†Ô∏è Stack deletion timed out or failed, but continuing with deployment..."
            echo "This might cause conflicts, but CloudFormation will handle existing resources"
          else
            echo "‚úÖ Stack deleted successfully"
          fi
        else
          echo "Skipping deletion, proceeding with deployment..."
        fi
        
        # Wait for any ongoing App Runner operations to complete
        echo "Checking for ongoing App Runner operations..."
        SERVICE_ARN=$(aws apprunner list-services \
          --region ${{ env.AWS_REGION }} \
          --query 'ServiceSummaryList[?contains(ServiceName, `polaris-backend`)].ServiceArn' \
          --output text) || echo "No App Runner services found"
        
        if [ ! -z "$SERVICE_ARN" ] && [ "$SERVICE_ARN" != "None" ]; then
          SERVICE_STATUS=$(aws apprunner describe-service \
            --service-arn "$SERVICE_ARN" \
            --region ${{ env.AWS_REGION }} \
            --query 'Service.Status' \
            --output text) || echo "UNKNOWN"
          
          echo "Current App Runner service status: $SERVICE_STATUS"
          
          if [ "$SERVICE_STATUS" = "OPERATION_IN_PROGRESS" ]; then
            echo "App Runner service is in OPERATION_IN_PROGRESS state, waiting for completion..."
            echo "This may take a few minutes..."
            
            # Wait for the service to be in a stable state
            aws apprunner wait service-updated \
              --service-arn "$SERVICE_ARN" \
              --region ${{ env.AWS_REGION }} || echo "Wait timed out, proceeding anyway..."
            
            # Check final status
            FINAL_STATUS=$(aws apprunner describe-service \
              --service-arn "$SERVICE_ARN" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' \
              --output text) || echo "UNKNOWN"
            
            echo "App Runner service final status: $FINAL_STATUS"
          fi
        fi
        
        # Deploy the stack
        echo "Deploying backend stack..."
        echo "Using connection ARN: arn:aws:apprunner:us-east-1:211125621822:connection/polaris-rfp/577729d32ae34e1380983e866e425016"
        
        if ! aws cloudformation deploy \
          --template-file .github/cloudformation/backend-apprunner.yml \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            RepositoryUrl=https://github.com/${{ github.repository }} \
            BranchName=${{ github.ref_name }} \
            Environment=production \
            CodeStarConnectionArn=arn:aws:apprunner:us-east-1:211125621822:connection/polaris-rfp/577729d32ae34e1380983e866e425016 \
          --region ${{ env.AWS_REGION }}; then
          
          echo "‚ùå Stack deployment failed!"
          echo "Getting detailed error information..."
          
          # Get all stack events
          echo "üìã All Stack Events:"
          aws cloudformation describe-stack-events \
            --stack-name ${{ env.BACKEND_STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'StackEvents[].{Time:Timestamp,Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}' \
            --output table || echo "Could not retrieve stack events"
          
          # Get failed events specifically
          echo "üî• Failed Events Only:"
          aws cloudformation describe-stack-events \
            --stack-name ${{ env.BACKEND_STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED` || ResourceStatus==`DELETE_FAILED`].{Time:Timestamp,Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}' \
            --output table || echo "No failed events found"
          
          # Try to get App Runner service logs if the service was created
          echo "üîç Checking for App Runner service..."
          SERVICE_ARN=$(aws apprunner list-services \
            --region ${{ env.AWS_REGION }} \
            --query 'ServiceSummaryList[?contains(ServiceName, `polaris-backend`)].ServiceArn' \
            --output text) || echo "No App Runner services found"
          
          if [ ! -z "$SERVICE_ARN" ] && [ "$SERVICE_ARN" != "None" ]; then
            echo "üìã App Runner Service Found: $SERVICE_ARN"
            echo "üîç App Runner Service Details:"
            aws apprunner describe-service \
              --service-arn "$SERVICE_ARN" \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.{Name:ServiceName,Status:Status,SourceConfiguration:SourceConfiguration}' \
              --output json || echo "Could not describe App Runner service"
          else
            echo "‚ùå No App Runner service found"
          fi
          
          echo "‚ùå Deployment failed - check errors above"
          exit 1
        fi
        
        echo "‚úÖ Backend stack deployed successfully!"

    - name: Get Backend URL
      id: get-backend-url
      run: |
        BACKEND_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceUrl`].OutputValue' \
          --output text)
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend URL: $BACKEND_URL"

  update-frontend-env:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-frontend, deploy-backend]
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: Get Backend URL
      id: get-backend-url
      run: |
        BACKEND_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceUrl`].OutputValue' \
          --output text)
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Get Amplify App ID
      id: get-app-id
      run: |
        APP_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.FRONTEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
          --output text)
        echo "app-id=$APP_ID" >> $GITHUB_OUTPUT

    - name: Update Amplify Environment Variables
      run: |
        aws amplify update-app \
          --app-id ${{ steps.get-app-id.outputs.app-id }} \
          --environment-variables API_BASE_URL=${{ steps.get-backend-url.outputs.backend-url }}

    - name: Trigger Frontend Rebuild
      run: |
        # Check if there's already a running job
        RUNNING_JOBS=$(aws amplify list-jobs \
          --app-id ${{ steps.get-app-id.outputs.app-id }} \
          --branch-name ${{ github.ref_name }} \
          --max-results 1 \
          --query 'jobSummaries[?status==`RUNNING` || status==`PENDING`]' \
          --output text)
        
        if [ -z "$RUNNING_JOBS" ]; then
          echo "No running jobs found, starting new build..."
          aws amplify start-job \
            --app-id ${{ steps.get-app-id.outputs.app-id }} \
            --branch-name ${{ github.ref_name }} \
            --job-type RELEASE
        else
          echo "Job already running, skipping trigger..."
        fi

  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-frontend, deploy-backend, update-frontend-env]
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.update-frontend-env.result }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
        else
          echo "‚ùå Deployment failed. Check the logs above."
          exit 1
        fi
