name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  FRONTEND_STACK_NAME: polaris-frontend-stack
  BACKEND_STACK_NAME: polaris-backend-stack

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: Deploy Frontend Stack
      run: |
        aws cloudformation deploy \
          --template-file .github/cloudformation/frontend-amplify.yml \
          --stack-name ${{ env.FRONTEND_STACK_NAME }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            RepositoryUrl=https://github.com/${{ github.repository }} \
            BranchName=${{ github.ref_name }} \
            Environment=production \
            GitHubToken=${{ secrets.GH_PERSONAL_TOKEN }}

    - name: Get Amplify App ID
      id: get-app-id
      run: |
        APP_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.FRONTEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
          --output text)
        echo "app-id=$APP_ID" >> $GITHUB_OUTPUT
        echo "Amplify App ID: $APP_ID"

    - name: Trigger Amplify Build
      run: |
        # Check if there's already a running job
        RUNNING_JOBS=$(aws amplify list-jobs \
          --app-id ${{ steps.get-app-id.outputs.app-id }} \
          --branch-name ${{ github.ref_name }} \
          --max-results 1 \
          --query 'jobSummaries[?status==`RUNNING` || status==`PENDING`]' \
          --output text)
        
        if [ -z "$RUNNING_JOBS" ]; then
          echo "No running jobs found, starting new build..."
          aws amplify start-job \
            --app-id ${{ steps.get-app-id.outputs.app-id }} \
            --branch-name ${{ github.ref_name }} \
            --job-type RELEASE
        else
          echo "Job already running, skipping trigger..."
        fi

  deploy-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: Deploy Backend Stack
      run: |
        # Check if stack exists and is in a failed state
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --query 'Stacks[0].StackStatus' \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "DOES_NOT_EXIST")
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ] || [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
          echo "Stack is in failed state, deleting..."
          aws cloudformation delete-stack --stack-name ${{ env.BACKEND_STACK_NAME }} --region ${{ env.AWS_REGION }}
          echo "Waiting for stack deletion..."
          aws cloudformation wait stack-delete-complete --stack-name ${{ env.BACKEND_STACK_NAME }} --region ${{ env.AWS_REGION }}
        fi
        
        # Deploy the stack
        aws cloudformation deploy \
          --template-file .github/cloudformation/backend-apprunner.yml \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            RepositoryUrl=https://github.com/${{ github.repository }} \
            BranchName=${{ github.ref_name }} \
            Environment=production \
          --region ${{ env.AWS_REGION }}

    - name: Get Backend URL
      id: get-backend-url
      run: |
        BACKEND_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceUrl`].OutputValue' \
          --output text)
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend URL: $BACKEND_URL"

  update-frontend-env:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-frontend, deploy-backend]
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: Get Backend URL
      id: get-backend-url
      run: |
        BACKEND_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.BACKEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceUrl`].OutputValue' \
          --output text)
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Get Amplify App ID
      id: get-app-id
      run: |
        APP_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.FRONTEND_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
          --output text)
        echo "app-id=$APP_ID" >> $GITHUB_OUTPUT

    - name: Update Amplify Environment Variables
      run: |
        aws amplify update-app \
          --app-id ${{ steps.get-app-id.outputs.app-id }} \
          --environment-variables API_BASE_URL=${{ steps.get-backend-url.outputs.backend-url }}

    - name: Trigger Frontend Rebuild
      run: |
        # Check if there's already a running job
        RUNNING_JOBS=$(aws amplify list-jobs \
          --app-id ${{ steps.get-app-id.outputs.app-id }} \
          --branch-name ${{ github.ref_name }} \
          --max-results 1 \
          --query 'jobSummaries[?status==`RUNNING` || status==`PENDING`]' \
          --output text)
        
        if [ -z "$RUNNING_JOBS" ]; then
          echo "No running jobs found, starting new build..."
          aws amplify start-job \
            --app-id ${{ steps.get-app-id.outputs.app-id }} \
            --branch-name ${{ github.ref_name }} \
            --job-type RELEASE
        else
          echo "Job already running, skipping trigger..."
        fi

  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-frontend, deploy-backend, update-frontend-env]
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.update-frontend-env.result }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed. Check the logs above."
          exit 1
        fi